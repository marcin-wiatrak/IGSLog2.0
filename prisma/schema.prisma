// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  email             String    @unique
  role              Role      @default(USER)
  password          String
  firstName         String
  lastName          String
  assignedTo        Order[]   @relation("handledBy")
  createdBy         Order[]   @relation("registeredBy")
  returnAssignedTo  Return[]  @relation("handleBy")
  returnMaterialAssignedTo  Return[]  @relation("handleByMaterial")
  returnCreatedBy   Return[]  @relation("registeredBy")
  meetingAssignedTo Meeting[] @relation("handleBy")
  suspended         Boolean   @default(false)
  hidden            Boolean   @default(false)

  @@unique([id, firstName, lastName])
}

enum Role {
  ADMIN
  USER
}

model Order {
  id             String      @id @default(uuid())
  no             Int?        @default(autoincrement())
  customer       Customer    @relation(fields: [customerId], references: [id])
  customerId     String
  attachment     String[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  registeredBy   User        @relation(name: "registeredBy", fields: [registeredById], references: [id])
  registeredById String
  handleBy       User?       @relation(name: "handledBy", fields: [handleById], references: [id])
  handleById     String?
  localization   String?
  pickupAt       DateTime?
  signature      String?
  type           String[]
  notes          String?
  status         orderStatus @default(NEW)
  deleted        Boolean     @default(false)
}

enum orderStatus {
  NEW
  PICKED_UP
  DELIVERED
  CLOSED
  PAUSED
}

model Customer {
  id          String   @id @default(uuid())
  name        String
  address     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  contactName String?
  phoneNumber String?
  Order       Order[]
  Return      Return[]
}

model Return {
  id                   String       @id @default(uuid())
  no                   Int?         @default(autoincrement())
  customer             Customer     @relation(fields: [customerId], references: [id])
  customerId           String
  attachment           String[]
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  registeredBy         User         @relation(name: "registeredBy", fields: [registeredById], references: [id])
  registeredById       String
  handleBy             User?        @relation(name: "handleBy", fields: [handleById], references: [id])
  handleById           String?
  handleByMaterial     User?        @relation(name: "handleByMaterial", fields: [handleByMaterialId], references: [id])
  handleByMaterialId   String?
  localization         String?
  localizationMaterial String?
  returnAt             DateTime?
  returnAtMaterial     DateTime?
  content              String?
  signature            String?
  type                 String[]
  notes                String?
  status               ReturnStatus @default(NEW)
  deleted              Boolean      @default(false)
}

enum ReturnStatus {
  NEW
  SET
  CLOSED
  PAUSED
}

model Meeting {
  id         String   @id @default(uuid())
  no         Int?     @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  unit       Unit     @relation(name: "unit", fields: [unitId], references: [id])
  unitId     String
  unitAgent  String?
  contact    String
  date       DateTime
  handleBy   User?    @relation(name: "handleBy", fields: [handleById], references: [id])
  handleById String?
  details    String?
  notes      String?
  deleted    Boolean  @default(false)
}

model Unit {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  meetings  Meeting[] @relation("unit")
}
